version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:16-alpine
    container_name: opencut-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: opencut
      POSTGRES_USER: opencut
      POSTGRES_PASSWORD: opencutthegoat
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U opencut -d opencut"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - default

  # Redis Service (Actual Redis server)
  redis:
    image: redis:7-alpine
    container_name: opencut-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
<<<<<<< HEAD
      start_period: 10s
    volumes:
      - redis_data:/data
=======
      start_period: 10s # <<< ADDED: Give Redis time to fully start before health checks begin
>>>>>>> 36266e3996565c1f24a743174a6462f2914ab8fd
    networks:
      - default

  # Serverless Redis HTTP Gateway (for local development)
  serverless-redis-http:
<<<<<<< HEAD
    build:
      context: .
      dockerfile: Dockerfile.srh
    container_name: opencut-redis-http
    restart: unless-stopped
    environment:
      REDIS_URL: "redis://redis:6379"
      TOKEN: "example_token"
    ports:
      - "8079:80"
=======
    image: hiett/serverless-redis-http:latest
    container_name: opencut-redis-http
    restart: unless-stopped
    environment:
      REDIS_URL: "redis://redis:6379" # Connects to the 'redis' service
      TOKEN: "example_token" # Matches UPSTASH_REDIS_REST_TOKEN in web service
    ports:
      - "8079:80" # Expose for local access if needed, but 'web' service connects internally
>>>>>>> 36266e3996565c1f24a743174a6462f2914ab8fd
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
<<<<<<< HEAD
      start_period: 45s # Increased start_period
    depends_on:
=======
      start_period: 15s # <<< Increased start_period for the HTTP gateway
    depends_on: # <<< ADDED: Ensure 'redis' is healthy before starting this service
>>>>>>> 36266e3996565c1f24a743174a6462f2914ab8fd
      redis:
        condition: service_healthy
    networks:
      - default

  # Web Application Service (Next.js App)
  web:
    build:
      context: .
<<<<<<< HEAD
      dockerfile: ./apps/web/Dockerfile
      args:
        DATABASE_URL: "postgresql://opencut:opencutthegoat@db:5432/opencut"
=======
      dockerfile: ./apps/web/Dockerfile # Ensure this path is correct relative to the docker-compose.yaml
      args: # THIS IS THE CRUCIAL ADDITION FOR BUILD-TIME VARS
        DATABASE_URL: "postgresql://opencut:opencutthegoat@db:5432/opencut" # Passed during image build
>>>>>>> 36266e3996565c1f24a743174a6462f2914ab8fd
    container_name: opencut-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://opencut:opencutthegoat@db:5432/opencut
      - BETTER_AUTH_URL=http://localhost:3000
      - BETTER_AUTH_SECRET=your-production-secret-key-here # IMPORTANT: REPLACE THIS WITH A SECURE GENERATED SECRET
      - UPSTASH_REDIS_REST_URL=http://serverless-redis-http:80 # Internal Docker network hostname
      - UPSTASH_REDIS_REST_TOKEN=example_token
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      serverless-redis-http:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - default

volumes:
  postgres_data: {}
  redis_data: {}

networks:
  default:
    name: opencut-network